# -*- coding: utf-8 -*-
"""Machine Predictive Maintenance Classification

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KB1CYw7iU-Z0sYVfUFL_IoF7oazm7gsx

# Importing the Dependencies

For Data Manipulation and Pre-Processing
"""

import pandas as pd
import numpy as np

"""For Data Visualization"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

"""For Machine  Learning"""

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report, confusion_matrix

"""### Data Exploration"""

df = pd.read_csv('/content/predictive_maintenance.csv')

df.head()

df.info()

df.isnull().sum()

df.describe()

# Looking for unique values
print(df.nunique())

df.shape

"""### Data Visualization"""

# Histograms for numerical features
numerical_columns = ['Air temperature [K]', 'Process temperature [K]',
                     'Rotational speed [rpm]', 'Torque [Nm]',
                     'Tool wear [min]']

df[numerical_columns].hist(bins=30, figsize=(12, 10))
plt.tight_layout()
plt.show()

# Correlation Heatmap
corr = df[numerical_columns].corr()
sns.heatmap(corr, annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Correlation Heatmap")
plt.show()

# Pairplot to analyze relationships between features and the target
sns.pairplot(df[numerical_columns + ['Target']], hue='Target', markers=["o", "s"])
plt.show()

"""### Feature Engineering"""

# Creating Rolling Features
df['air_temp_rolling_mean'] = df['Air temperature [K]'].rolling(window=5).mean()
df['torque_rolling_mean'] = df['Torque [Nm]'].rolling(window=5).mean()
df['process_temp_rolling_mean'] = df['Process temperature [K]'].rolling(window=5).mean()
df['rotational_speed_rolling_mean'] = df['Rotational speed [rpm]'].rolling(window=5).mean()

# Creating Interaction Features
df['temp_interaction'] = df['Air temperature [K]'] * df['Process temperature [K]']
df['torque_speed_interaction'] = df['Torque [Nm]'] * df['Rotational speed [rpm]']

# Using rolling window for aggregation
df['air_temp_rolling_max'] = df['Air temperature [K]'].rolling(window=10).max()
df['torque_rolling_max'] = df['Torque [Nm]'].rolling(window=10).max()
df['process_temp_rolling_max'] = df['Process temperature [K]'].rolling(window=10).max()
df['rotational_speed_rolling_max'] = df['Rotational speed [rpm]'].rolling(window=10).max()